[project]
name = "httpx-curl-cffi"
version = "0.1.2"
description = "httpx transport for curl_cffi (python bindings for curl-impersonate)"
authors = [{ name = "Victor Gavro", email = "vgavro@gmail.com" }]
# https://spdx.org/licenses/BSD-3-Clause.html
license = "BSD-3-Clause"
license-files = ["LICENSE"]
readme = "README.md"
classifiers = [
  # based on https://github.com/encode/httpx/blob/master/pyproject.toml
  # (without Trio and Python < 3.10)
  "Development Status :: 4 - Beta",
  "Environment :: Web Environment",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  # pdm.backend.exceptions.ValidationError:
  # project.license: Setting "project.license" to an SPDX license expression
  # is not compatible with 'License ::' classifiers
  # "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Typing :: Typed",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Internet :: WWW/HTTP",
]

dependencies = ["curl-cffi>=0.7.0", "httpx>=0.21.0"]
requires-python = ">=3.10"

[project.urls]
Homepage = "https://github.com/vgavro/httpx-curl-cffi"
Repository = "https://github.com/vgavro/httpx-curl-cffi"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[dependency-groups]
test = [
  "pytest>=7.4.4",
  "pytest-httpserver>=1.1.0",
  "trustme>=1.2.1",
  "pytest-asyncio>=0.23.3",
  # "pytest-mock>=3.12.0",
]
dev = [
  # fix mypy/ruff versions to match `.pre-commit-config.yaml`
  "mypy==1.14.1",
  "ruff==0.9.2",
  "pre-commit>=3.6.0",
  "ipdb>=0.13.13",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # https://docs.astral.sh/ruff/rules/raise-vanilla-args/
  "TRY003",
  # https://docs.astral.sh/ruff/rules/raw-string-in-exception/
  "EM101",
  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
  "D",
  # https://docs.astral.sh/ruff/rules/#flake8-fixme-fix
  "FIX",
  # https://docs.astral.sh/ruff/rules/#flake8-todos-td
  "TD",
  # https://docs.astral.sh/ruff/rules/assert/
  "S101",
  # https://docs.astral.sh/ruff/rules/any-type/
  "ANN401",
  # `Any` in `__exit__` and `__aexit__`
  # https://docs.astral.sh/ruff/rules/bad-exit-annotation/
  "PYI036",
]

[tool.pytest.ini_options]
# https://docs.pytest.org/en/stable/reference/customize.html#pyproject-toml
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function" # default
testpaths = ["tests"]
filterwarnings = [
  # https://docs.pytest.org/en/latest/how-to/capture-warnings.html
  # https://docs.python.org/3/library/warnings.html#warning-filter
  "error",
]

[tool.mypy]
plugins = []
check_untyped_defs = true

[tool.pdm.build]
excludes = ["tests/"]

[tool.pdm.scripts]
test = { shell = "pytest" }
